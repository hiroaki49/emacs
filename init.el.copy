;基本設定
; UTF-8とする
(prefer-coding-system 'utf-8)
; 起動時の画面はいらない
(setq inhibit-startup-message t)
; メニューバーを隠す
(tool-bar-mode -1)
; 行番号を常に表示する
(global-linum-mode t)
; ホームディレクトリを初期ディレクトリにする
(cd "~/")
; tab 幅を 4 に設定
(setq-default tab-width 4)
; バッファの移動
(setq windmove-wrap-around t)
(windmove-default-keybindings)
; load-pathにelispを追加、基本的にここに設置
(add-to-list 'load-path "~/.emacs.d/elisp/")
;; Warning の抑制
(setq byte-compile-warnings
      '(;;not
        free-vars
        ;;unresolved
        ;;callargs
        ;;redefine
        ;; obsolete
        ;;noruntime
        ;;cl-functions
        ;;interactive-only
        ;; make-local
        ))

;server-start
(require 'server)
(unless (server-running-p)
  (server-start))

;wdired mode
(require 'wdired)
(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)

;現在行のハイライト
(defface hlline-face
  '((((class color)
      (background dark))
     (:background "#2f4f4f"))
    (((class color)
      (background light))
     (:background  "#98FB98"))
    (t
     ()))
  "*Face used by hl-line.")
(setq hl-line-face 'hlline-face)
(global-hl-line-mode)

;; ctrl+gの弱い版
(global-set-key (kbd "C-M-g") 'keyboard-escape-quit)
                                        ;
;gtags
(require 'gtags)

;kill-lineで行が連結したときにインデントを減らす
(defadvice kill-line (before kill-line-and-fixup activate)
      (when (and (not (bolp)) (eolp))
        (forward-char)
        (fixup-whitespace)
        (backward-char)))

; window分割を便利に
(defun split-window-vertically-n (num_wins)
  (interactive "p")
  (if (= num_wins 2)
      (split-window-vertically)
    (progn
      (split-window-vertically
       (- (window-height) (/ (window-height) num_wins)))
      (split-window-vertically-n (- num_wins 1)))))
(defun split-window-horizontally-n (num_wins)
  (interactive "p")
  (if (= num_wins 2)
      (split-window-horizontally)
    (progn
      (split-window-horizontally
       (- (window-width) (/ (window-width) num_wins)))
      (split-window-horizontally-n (- num_wins 1)))))
(defun other-window-or-split ()
  (interactive)
  (when (one-window-p)
    (if (>= (window-body-width) 270)
        (split-window-horizontally-n 3)
      (split-window-horizontally)))
  (other-window 1))
(global-set-key (kbd "C-t") 'other-window-or-split)
(global-set-key (kbd "C-z") 'delete-window)


;package
(require 'package)
(setq package-archives '( 
("gnu" . "http://elpa.gnu.org/packages/") 
("marmalade" . "http://marmalade-repo.org/packages/") 
("melpa" . "http://melpa.milkbox.net/packages/")))
;Initialize
(package-initialize)

;pathの引き継ぎ package
(exec-path-from-shell-initialize)

;flycheck package
(add-hook 'after-init-hook #'global-flycheck-mode)
;; (eval-after-load 'flycheck
;;   '(custom-set-variables
;;    '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
(global-set-key (kbd "C-c n") 'flycheck-next-error)
(global-set-key (kbd "C-c p") 'flycheck-previous-error)

;git gutter
(require 'git-gutter-fringe)
(global-git-gutter-mode)


;同名ファイルの識別
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

; recentf
(setq recentf-max-saved-items 2000)
(setq recentf-exclude '(".recentf"))
(setq recentf-auto-cleanup 10)
(setq recentf-auto-save-timer
      (run-with-idle-timer 30 t 'recentf-save-list))
(recentf-mode 1)

; undo-tree
;(require 'undo-tree)
(global-undo-tree-mode t)
(global-set-key (kbd "M-/") 'undo-tree-redo)

; popwin
(require 'popwin)
(setq display-buffer-function 'popwin:display-buffer)
(setq anything-samewindow nil)
(push '("*anything*" :height 25) popwin:special-display-config)

; ウィンドウの移動
(define-prefix-command 'windmove-map)
(global-set-key (kbd "C-c") 'windmove-map)
(define-key windmove-map "h" 'windmove-left)
(define-key windmove-map "j" 'windmove-down)
(define-key windmove-map "k" 'windmove-up)
(define-key windmove-map "l" 'windmove-right)

;インデントにはスペースを用いる
(setq-default indent-tabs-mode nil)
;１行ずつスクロールする
(setq scroll-step 1)
;スクロールをスムーズに
;; ;; マウスホイールでスクロール
(defun scroll-down-with-lines ()
  ""
  (interactive)
  (scroll-down 1)
  )

;; ctrl+aで行頭に
(defun beginning-of-indented-line (current-point)
  "インデント文字を飛ばした行頭に戻る。ただし、ポイントから行頭までの間にインデント文字しかない場合は、行頭に戻る。"
  (interactive "d")
  (if (string-match
       "^[ \t]+$"
       (save-excursion
         (buffer-substring-no-properties
          (progn (beginning-of-line) (point))
          current-point)))
      (beginning-of-line)
    (back-to-indentation)))

(defun beginning-of-visual-indented-line (current-point)
  "インデント文字を飛ばした行頭に戻る。ただし、ポイントから行頭までの間にインデント文 字しかない場合は、行頭に戻る。"
  (interactive "d")
  (let ((vhead-pos (save-excursion (progn (beginning-of-visual-line) (point))))
        (head-pos (save-excursion (progn (beginning-of-line) (point)))))
    (cond
     ;; 物理行の1行目にいる場合
     ((eq vhead-pos head-pos)
      (if (string-match
           "^[ \t]+$"
           (buffer-substring-no-properties vhead-pos current-point))
          (beginning-of-visual-line)
        (back-to-indentation)))
     ;; 物理行の2行目以降の先頭にいる場合
     ((eq vhead-pos current-point)
      (backward-char)
      (beginning-of-visual-indented-line (point)))
     ;; 物理行の2行目以降の途中にいる場合
     (t (beginning-of-visual-line)))))
(global-set-key "\C-a" 'beginning-of-visual-indented-line)

;クリップボードの設定
(global-set-key "\M-w" 'clipboard-kill-ring-save)  ; クリップボードにコピー
(global-set-key "\C-w" 'clipboard-kill-region)     ; 切り取ってクリップボードへ

;バックスペースの設定
(global-set-key "\C-h" 'delete-backward-char)

;フォント
;; Ricty (http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty.html)
;; window-system入れとかないとターミナルでエラーがでる
(if (eq window-system 'ns)
    (progn
      (set-face-attribute 'default nil
                          :family "Ricty"
                          :height 130)
      ;; 日本語
      (set-fontset-font
       nil 'japanese-jisx0208
       ;; (font-spec :family "Hiragino Mincho Pro")) ;; font
       (font-spec :family "Hiragino Kaku Gothic ProN")))) ;; font



;カラーテーマ
(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
;(add-to-list 'custom-theme-load-path "~/.emacs.d/elisp/emacs-color-theme-solarized")
;(load-theme 'solarized-dark t)
;(require 'color-theme)
;; (eval-after-load "color-theme"
;;   '(progn
;;      (color-theme-initialize)
;;     (load-theme 'solarized-dark t)))
(add-to-list 'custom-theme-load-path "~/.emacs.d/elisp/")
(setq molokai-theme-kit t)
(load-theme 'molokai t)

;; powerline
(require 'powerline)

;;sudoで開き直す
(defun file-root-p (filename)
  "Return t if file FILENAME created by root."
  (eq 0 (nth 2 (file-attributes filename))))

(defun th-rename-tramp-buffer ()
  (when (file-remote-p (buffer-file-name))
    (rename-buffer
     (format "%s:%s"
             (file-remote-p (buffer-file-name) 'method)
             (buffer-name)))))

(add-hook 'find-file-hook
          'th-rename-tramp-buffer)

(defadvice find-file (around th-find-file activate)
  "Open FILENAME using tramp's sudo method if it's read-only."
  (if (and (file-root-p (ad-get-arg 0))
           (not (file-writable-p (ad-get-arg 0)))
           (y-or-n-p (concat "File "
                             (ad-get-arg 0)
                             " is read-only.  Open it as root? ")))
      (th-find-file-sudo (ad-get-arg 0))
    ad-do-it))

(defun th-find-file-sudo (file)
  "Opens FILE with root privileges."
  (interactive "F")
  (set-buffer (find-file (concat "/sudo::" file))))


;; php-mode
(load-library "php-mode")
(require 'php-mode)
(add-hook 'php-mode-hook
		  '(lambda()
			 (setq tab-width 4)
			 (setq c-basic-offset 4)
			 (c-set-offset 'case-label' 4)
			 (c-set-offset 'arglist-intro' 4)
			 (c-set-offset 'arglist-cont-nonempty' 4)
			 (c-set-offset 'arglist-close' 0)
             (require 'php-completion)
             (php-completion-mode t)
             (define-key php-mode-map (kbd "C-o") 'phpcmp-complete) ;php-completionの補完実行キーバインドの設定
             (make-local-variable 'ac-sources)
             (setq ac-sources '(
                                ac-source-words-in-same-mode-buffers
                                ac-source-php-completion
                                ac-source-filename
                                ))))
(add-hook 'php-mode-hook 'flycheck-mode)

;; ;; flymake
;; (defun flymake-php-init ()
;;   (let* ((temp-file (flymake-init-create-temp-buffer-copy
;;                      'flymake-create-temp-inplace))
;;          (local-file (file-relative-name
;;                       temp-file
;;                       (file-name-directory buffer-file-name))))
;;     (list "php" (list "-l" local-file))))
;; (push '(".+\\.php$" flymake-php-init) flymake-allowed-file-name-masks)
;; (push '("(Parse|Fatal) error: (.*) in (.*) on line ([0-9]+)" 3 4 nil 2) flymake-err-line-patterns)

;; (add-hook 'php-mode-hook (flymake-mode t))


;;emmet-mode
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; マークアップ言語全部で使う
(add-hook 'css-mode-hook  'emmet-mode) ;; CSSにも使う
(eval-after-load "emmet-mode"
  '(define-key emmet-mode-keymap (kbd "C-j") nil)) ;; C-j は newline のままにしておく
(keyboard-translate ?\C-i ?\H-i) ;;C-i と Tabの被りを回避
(define-key emmet-mode-keymap (kbd "H-i") 'emmet-expand-line) ;; C-i で展開

;; ;; mmm-mode
;; (require 'mmm-mode)
;; (require 'mmm-auto)
;; (setq mmm-submode-decoration-level 2)
;; (invert-face 'mmm-default-submode-face t)
;; (setq mmm-font-lock-available-p t)
;; (setq mmm-global-mode 'maybe)
;; (set-face-bold-p 'mmm-default-submode-face t)
;; (set-face-background 'mmm-default-submode-face nil)
;; (mmm-add-mode-ext-class nil "\\.php?\\'" 'html-php)
;; (mmm-add-classes
;;  '((html-php
;;     :submode php-mode
;;     :front "<\\?\\(php\\)?"
;;     :back "\\?>")))
;; (add-to-list 'auto-mode-alist '("\\.php?\\'" . html-mode))
;; ;; タブの改善
;; (defun save-mmm-c-locals ()
;;   (with-temp-buffer
;;     (php-mode)
;;     (dolist (v (buffer-local-variables))
;;       (when (string-match "\\`c-" (symbol-name (car v)))
;;         (add-to-list 'mmm-save-local-variables `(,(car v) nil, mmm-c-derived-modes))))))
;; (save-mmm-c-locals)

;; Coding system.
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; text-mode

;;auto_complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/Users/hiroaki/.emacs.d/elisp/ac-dict")
(ac-config-default)

;; ;;auto-install
;; (require 'auto-install)
;; (setq auto-install-directory "~/.emacs.d/elisp/") ;Emacs Lispをインストールするディレクトリの指定
;; (auto-install-update-emacswiki-package-name t)
;; (auto-install-compatibility-setup) ;install-elisp.elとコマンド名を同期


;;anythingの設定
(require 'anything)
(global-set-key (kbd "C-x ;") 'anything) ;; C-x ; でanything起動
(require 'anything-startup)
(global-set-key (kbd "C-x b") 'anything-for-files)
(global-set-key (kbd "M-y") 'anything-show-kill-ring)
(global-set-key (kbd "M-x") 'anything-M-x)
(global-set-key (kbd "C-u") 'anything-gtags)
;kill-ringの設定
(defadvice yank-pop (around anything-kill-ring-maybe activate)
  (if (not (eq last-command 'yank))
      (anything-kill-ring)
    ad-do-it))
;; update GTAGS C-u M-x update-gtagsでも可
(defun update-gtags (&optional prefix)
  (interactive "P")
  (let ((rootdir (gtags-get-rootpath))
        (args (if prefix "-v" "-iv")))
    (when rootdir
      (let* ((default-directory rootdir)
             (buffer (get-buffer-create "*update GTAGS*")))
        (save-excursion
          (set-buffer buffer)
          (erase-buffer)
          (let ((result (process-file "gtags" nil buffer nil args)))
            (if (= 0 result)
                (message "GTAGS successfully updated.")
              (message "update GTAGS error with exit status %d" result))))))))
(add-hook 'after-save-hook 'update-gtags)
;; gtags-find-tag で検索時に以前のバッファが残らないようにクリアする
(setq gtags-select-buffer-single t)
;; anything-gtagsでgtagsの候補バッファを奪うときに違う名前でバッファを作りまくるのでどんどん残る。
;; gtags-select-buffer-singleを真似して事前に以前のバッファをクリアする
(defadvice ag-hijack-gtags-select-mode (before before-ag-hijack-gtags-select-mode activate)
  "clear buffers before hijack"
  (setq anything-buffers nil) ;; resume用の変数もクリア。この後に来るanythingの候補が入るので直前のresumeはできる。
  (let (now-buffer-list now-buffer)
    (setq now-buffer-list (buffer-list))
    (while now-buffer-list
      (setq now-buffer (car now-buffer-list))
      (if (string-match "*anything gtags*" (buffer-name now-buffer))
          (kill-buffer now-buffer))
      (setq now-buffer-list (cdr now-buffer-list)))))


;;haml-modeの設定
(add-hook 'haml-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)
                 (define-key haml-mode-map "\C-m" 'newline-and-indent)))

;;scss-mode
(autoload 'sass-mode "scss-mode")
(setq scss-compile-at-save nil) ;; 自動コンパイルをオフにする

;; パスを指定
(add-to-list 'load-path "~/.emacs.d/vendor")

(add-to-list 'auto-mode-alist '("\\.scss$" . scss-mode))

;; ;; インデント幅を2にする
;; ;; コンパイルは compass watchで行うので自動コンパイルをオフ
;; (defun scss-custom ()
;;   "scss-mode-hook"
;;   (and
;;    (set (make-local-variable 'css-indent-offset) 2)
;;    (set (make-local-variable 'scss-compile-at-save) nil)
;;    )
;;   )
;; (add-hook 'scss-mode-hook
;;   '(lambda() (scss-custom)))

;; sass-mode
(autoload 'sass-mode "sass-mode")
(add-to-list 'auto-mode-alist '("\\.sass$" . sass-mode))


;; スクリーンの最大化
(set-frame-parameter nil 'fullscreen 'maximized)

;;; color-occur.el
(require 'color-moccur)
(setq moccur-split-word t) ;スペースで区切られた複数の単語にマッチさせる
(when (require 'anything-c-moccur nil t)
    (setq
     ;; anything-c-moccur用 `anything-idle-delay'
     anything-c-moccur-anything-idle-delay 0.1
     ;; バッファの情報をハイライトする
     anything-c-moccur-higligt-info-line-flag t
     ;; 現在選択中の候補の位置を他のwindowに表示する
     anything-c-moccur-enable-auto-look-flag t
     ;; 起動時にポイントの位置の単語を初期パターンにする
     anything-c-moccur-enable-initial-pattern t))
(global-set-key (kbd "C-M-o")
                'anything-c-moccur-occur-by-moccur)

;; タブ化
;; http://www.emacswiki.org/emacs/tabbar.el

;; tabbarを有効にする
(tabbar-mode 1)

;; ボタンをシンプルにする
(setq tabbar-home-button-enabled "")
(setq tabbar-scroll-right-button-enabled "")
(setq tabbar-scroll-left-button-enabled "")
(setq tabbar-scroll-right-button-disabled "")
(setq tabbar-scroll-left-button-disabled "")

;; タブ上でマウスホイール操作無効
(tabbar-mwheel-mode -1)

;; グループ化しない
(setq tabbar-buffer-groups-function nil)

;; 左に表示されるボタンを無効化
(dolist (btn '(tabbar-buffer-home-button
               tabbar-scroll-left-button
               tabbar-scroll-right-button))
  (set btn (cons (cons "" nil)
                 (cons "" nil))))

;; ウインドウからはみ出たタブを省略して表示
(setq tabbar-auto-scroll-flag nil)

;; タブとタブの間の長さ
(setq tabbar-separator '(1.5))

;; Ctrl-Tab, Ctrl-Shift-Tab でタブを切り替える
(dolist (func '(tabbar-mode tabbar-forward-tab tabbar-forward-group tabbar-backward-tab tabbar-backward-group))
  (autoload func "tabbar" "Tabs at the top of buffers and easy control-tab navigation"))
(defmacro defun-prefix-alt (name on-no-prefix on-prefix &optional do-always)
  `(defun ,name (arg)
     (interactive "P")
     ,do-always
     (if (equal nil arg)
         ,on-no-prefix
       ,on-prefix)))
(defun-prefix-alt shk-tabbar-next (tabbar-forward-tab) (tabbar-forward-group) (tabbar-mode 1))
(defun-prefix-alt shk-tabbar-prev (tabbar-backward-tab) (tabbar-backward-group) (tabbar-mode 1))
(global-set-key [(control tab)] 'shk-tabbar-next)
(global-set-key [(control shift tab)] 'shk-tabbar-prev)

;; 外観変更
(set-face-attribute
 'tabbar-default nil
 :family "Comic Sans MS"
 :background "black"
 :foreground "gray72"
 :height 1.0)
(set-face-attribute
 'tabbar-unselected nil
 :background "black"
 :foreground "grey72"
 :box nil)
(set-face-attribute
 'tabbar-selected nil
 :background "black"
 :foreground "#c82829"
 :box nil)
(set-face-attribute
 'tabbar-button nil
 :box nil)
(set-face-attribute
 'tabbar-separator nil
 :height 1.2)

;; タブに表示させるバッファの設定
(defvar my-tabbar-displayed-buffers
 '("scratch*" "*Messages*" "*Backtrace*" "*Colors*" "*Faces*" "*vc-")
  "*Regexps matches buffer names always included tabs.")
(defun my-tabbar-buffer-list ()
  "Return the list of buffers to show in tabs.
Exclude buffers whose name starts with a space or an asterisk.
The current buffer and buffers matches `my-tabbar-displayed-buffers'
are always included."
  (let* ((hides (list ?\  ?\*))
         (re (regexp-opt my-tabbar-displayed-buffers))
         (cur-buf (current-buffer))
         (tabs (delq nil
                     (mapcar (lambda (buf)
                               (let ((name (buffer-name buf)))
                                 (when (or (string-match re name)
                                           (not (memq (aref name 0) hides)))
                                   buf)))
                             (buffer-list)))))
    ;; Always include the current buffer.
    (if (memq cur-buf tabs)
        tabs
      (cons cur-buf tabs))))
(setq tabbar-buffer-list-function 'my-tabbar-buffer-list)

;; GUIで直接ファイルを開いた場合フレームを作成しない
(add-hook 'before-make-frame-hook
          (lambda ()
            (when (eq tabbar-mode t)
              (switch-to-buffer (buffer-name))
              (delete-this-frame))))

;;;
